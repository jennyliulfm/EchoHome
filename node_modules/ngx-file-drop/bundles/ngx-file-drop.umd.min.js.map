{"version":3,"sources":["ng://ngx-file-drop/ngx-file-drop/ngx-file-drop-entry.ts","ng://ngx-file-drop/ngx-file-drop/ngx-templates.directive.ts","ng://ngx-file-drop/ngx-file-drop/ngx-file-drop.component.ts","ng://ngx-file-drop/ngx-file-drop/ngx-file-drop.module.ts"],"names":["relativePath","fileEntry","this","NgxFileDropContentTemplateDirective","template","TemplateRef","__decorate","Directive","selector","NgxFileDropComponent","zone","renderer","_this","accept","directory","multiple","dropZoneLabel","dropZoneClassName","useDragEnter","contentClassName","showBrowseBtn","browseBtnClassName","browseBtnLabel","onFileDrop","EventEmitter","onFileOver","onFileLeave","isDraggingOverDropZone","globalDraggingInProgress","files","numOfActiveReadEntries","helperFormEl","fileInputPlaceholderEl","dropEventTimerSubscription","_disabled","openFileSelector","event","fileSelector","nativeElement","click","globalDragStartListener","listen","evt","globalDragEndListener","Object","defineProperty","prototype","value","ngOnDestroy","unsubscribe","onDragOver","preventAndStop","isDropzoneDisabled","emit","onDragEnter","onDragLeave","dropFiles","dataTransfer","dropEffect","items","checkFiles","uploadFiles","target","resetFileInput","i","item","entry","this_1","canGetAsEntry","webkitGetAsEntry","isFile","toUpload","NgxFileDropEntry","name","addToQueue","isDirectory","traverseFileTree","fakeFileEntry","file","callback","length","timer","subscribe","path","push","dirReader_1","createReader","entries_1","readEntries_1","readEntries","result","concat","toUpload_1","run","fileInputEl","fileInputContainerEl","parentElement","getHelperFormElement","getFileInputPlaceholderElement","insertBefore","appendChild","reset","removeChild","createElement","disabled","stopPropagation","preventDefault","NgZone","Renderer2","Input","Output","ContentChild","read","ViewChild","static","ElementRef","__decorate$1","Component","NgxFileDropModule","__decorate$2","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap"],"mappings":"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","sourcesContent":["import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nexport class NgxFileDropEntry {\r\n    constructor(\r\n        public relativePath: string,\r\n        public fileEntry: FileSystemEntry\r\n    ) {\r\n    }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-file-drop-content-tmp]' })\r\nexport class NgxFileDropContentTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) { }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n  TemplateRef,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Subscription, timer } from 'rxjs';\r\n\r\nimport { NgxFileDropEntry } from './ngx-file-drop-entry';\r\nimport { FileSystemDirectoryEntry, FileSystemEntry, FileSystemFileEntry } from './dom.types';\r\nimport { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';\r\n\r\n@Component({\r\n  selector: 'ngx-file-drop',\r\n  templateUrl: './ngx-file-drop.component.html',\r\n  styleUrls: ['./ngx-file-drop.component.scss'],\r\n})\r\nexport class NgxFileDropComponent implements OnDestroy {\r\n\r\n  @Input()\r\n  public accept: string = '*';\r\n\r\n  @Input()\r\n  public directory: boolean = false;\r\n\r\n  @Input()\r\n  public multiple: boolean = true;\r\n\r\n  @Input()\r\n  public dropZoneLabel: string = '';\r\n\r\n  @Input()\r\n  public dropZoneClassName: string = 'ngx-file-drop__drop-zone';\r\n\r\n  @Input()\r\n  public useDragEnter: boolean = false;\r\n\r\n  @Input()\r\n  public contentClassName: string = 'ngx-file-drop__content';\r\n\r\n  public get disabled(): boolean { return this._disabled; }\r\n  @Input()\r\n  public set disabled(value: boolean) {\r\n    this._disabled = (value != null && `${value}` !== 'false');\r\n  }\r\n\r\n  @Input()\r\n  public showBrowseBtn: boolean = false;\r\n  @Input()\r\n  public browseBtnClassName: string = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\r\n\r\n  @Input()\r\n  public browseBtnLabel: string = 'Browse files';\r\n\r\n  @Output()\r\n  public onFileDrop: EventEmitter<NgxFileDropEntry[]> = new EventEmitter();\r\n  @Output()\r\n  public onFileOver: EventEmitter<any> = new EventEmitter();\r\n  @Output()\r\n  public onFileLeave: EventEmitter<any> = new EventEmitter();\r\n\r\n  // custom templates\r\n  @ContentChild(NgxFileDropContentTemplateDirective, { read: TemplateRef }) contentTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('fileSelector', { static: true })\r\n  public fileSelector: ElementRef;\r\n\r\n  public isDraggingOverDropZone: boolean = false;\r\n\r\n  private globalDraggingInProgress: boolean = false;\r\n  private globalDragStartListener: () => void;\r\n  private globalDragEndListener: () => void;\r\n\r\n  private files: NgxFileDropEntry[] = [];\r\n  private numOfActiveReadEntries: number = 0;\r\n\r\n  private helperFormEl: HTMLFormElement | null = null;\r\n  private fileInputPlaceholderEl: HTMLDivElement | null = null;\r\n\r\n  private dropEventTimerSubscription: Subscription | null = null;\r\n\r\n  private _disabled: boolean = false;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (evt: Event) => {\r\n      this.globalDraggingInProgress = true;\r\n    });\r\n    this.globalDragEndListener = this.renderer.listen('document', 'dragend', (evt: Event) => {\r\n      this.globalDraggingInProgress = false;\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.dropEventTimerSubscription) {\r\n      this.dropEventTimerSubscription.unsubscribe();\r\n      this.dropEventTimerSubscription = null;\r\n    }\r\n    this.globalDragStartListener();\r\n    this.globalDragEndListener();\r\n    this.files = [];\r\n    this.helperFormEl = null;\r\n    this.fileInputPlaceholderEl = null;\r\n  }\r\n\r\n  public onDragOver(event: Event): void {\r\n    if (this.useDragEnter) {\r\n      this.preventAndStop(event);\r\n    } else if (!this.isDropzoneDisabled() && !this.useDragEnter) {\r\n      if (!this.isDraggingOverDropZone) {\r\n        this.isDraggingOverDropZone = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragEnter(event: Event): void {\r\n    if (!this.isDropzoneDisabled() && this.useDragEnter) {\r\n      if (!this.isDraggingOverDropZone) {\r\n        this.isDraggingOverDropZone = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragLeave(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (this.isDraggingOverDropZone) {\r\n        this.isDraggingOverDropZone = false;\r\n        this.onFileLeave.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public dropFiles(event: DragEvent): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      this.isDraggingOverDropZone = false;\r\n      if (event.dataTransfer) {\r\n        event.dataTransfer.dropEffect = 'copy';\r\n        let items: FileList | DataTransferItemList;\r\n        if (event.dataTransfer.items) {\r\n          items = event.dataTransfer.items;\r\n        } else {\r\n          items = event.dataTransfer.files;\r\n        }\r\n        this.preventAndStop(event);\r\n        this.checkFiles(items);\r\n      }\r\n    }\r\n  }\r\n\r\n  public openFileSelector = (event?: MouseEvent): void => {\r\n    if (this.fileSelector && this.fileSelector.nativeElement) {\r\n      (this.fileSelector.nativeElement as HTMLInputElement).click();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes the change event of the file input and adds the given files.\r\n   * @param Event event\r\n   */\r\n  public uploadFiles(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (event.target) {\r\n        const items = (event.target as HTMLInputElement).files || ([] as any);\r\n        this.checkFiles(items);\r\n        this.resetFileInput();\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkFiles(items: FileList | DataTransferItemList): void {\r\n    for (let i = 0; i < items.length; i++) {\r\n      const item = items[i];\r\n      let entry: FileSystemEntry | null = null;\r\n      if (this.canGetAsEntry(item)) {\r\n        entry = item.webkitGetAsEntry();\r\n      }\r\n\r\n      if (!entry) {\r\n        if (item) {\r\n          const fakeFileEntry: FileSystemFileEntry = {\r\n            name: (item as File).name,\r\n            isDirectory: false,\r\n            isFile: true,\r\n            file: (callback: (filea: File) => void): void => {\r\n              callback(item as File);\r\n            },\r\n          };\r\n          const toUpload: NgxFileDropEntry = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\r\n          this.addToQueue(toUpload);\r\n        }\r\n\r\n      } else {\r\n        if (entry.isFile) {\r\n          const toUpload: NgxFileDropEntry = new NgxFileDropEntry(entry.name, entry);\r\n          this.addToQueue(toUpload);\r\n\r\n        } else if (entry.isDirectory) {\r\n          this.traverseFileTree(entry, entry.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.dropEventTimerSubscription) {\r\n      this.dropEventTimerSubscription.unsubscribe();\r\n    }\r\n    this.dropEventTimerSubscription = timer(200, 200)\r\n      .subscribe(() => {\r\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n          const files = this.files;\r\n          this.files = [];\r\n          this.onFileDrop.emit(files);\r\n        }\r\n      });\r\n  }\r\n\r\n  private traverseFileTree(item: FileSystemEntry, path: string): void {\r\n    if (item.isFile) {\r\n      const toUpload: NgxFileDropEntry = new NgxFileDropEntry(path, item);\r\n      this.files.push(toUpload);\r\n\r\n    } else {\r\n      path = path + '/';\r\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\r\n      let entries: FileSystemEntry[] = [];\r\n\r\n      const readEntries = () => {\r\n        this.numOfActiveReadEntries++;\r\n        dirReader.readEntries((result) => {\r\n          if (!result.length) {\r\n            // add empty folders\r\n            if (entries.length === 0) {\r\n              const toUpload: NgxFileDropEntry = new NgxFileDropEntry(path, item);\r\n              this.zone.run(() => {\r\n                this.addToQueue(toUpload);\r\n              });\r\n\r\n            } else {\r\n              for (let i = 0; i < entries.length; i++) {\r\n                this.zone.run(() => {\r\n                  this.traverseFileTree(entries[i], path + entries[i].name);\r\n                });\r\n              }\r\n            }\r\n\r\n          } else {\r\n            // continue with the reading\r\n            entries = entries.concat(result);\r\n            readEntries();\r\n          }\r\n\r\n          this.numOfActiveReadEntries--;\r\n        });\r\n      };\r\n\r\n      readEntries();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n   */\r\n  private resetFileInput(): void {\r\n    if (this.fileSelector && this.fileSelector.nativeElement) {\r\n      const fileInputEl = this.fileSelector.nativeElement as HTMLInputElement;\r\n      const fileInputContainerEl = fileInputEl.parentElement;\r\n      const helperFormEl = this.getHelperFormElement();\r\n      const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\r\n\r\n      // Just a quick check so we do not mess up the DOM (will never happen though).\r\n      if (fileInputContainerEl !== helperFormEl) {\r\n        // Insert the form input placeholder in the DOM before the form input element.\r\n        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\r\n        // Add the form input as child of the temporary form element, removing the form input from the DOM.\r\n        this.renderer.appendChild(helperFormEl, fileInputEl);\r\n        // Reset the form, thus clearing the input element of any files.\r\n        helperFormEl.reset();\r\n        // Add the file input back to the DOM in place of the file input placeholder element.\r\n        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\r\n        // Remove the input placeholder from the DOM\r\n        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a cached HTML form element as a helper element to clear the file input element.\r\n   */\r\n  private getHelperFormElement(): HTMLFormElement {\r\n    if (!this.helperFormEl) {\r\n      this.helperFormEl = this.renderer.createElement('form') as HTMLFormElement;\r\n    }\r\n\r\n    return this.helperFormEl;\r\n  }\r\n\r\n  /**\r\n   * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n   */\r\n  private getFileInputPlaceholderElement(): HTMLDivElement {\r\n    if (!this.fileInputPlaceholderEl) {\r\n      this.fileInputPlaceholderEl = this.renderer.createElement('div') as HTMLDivElement;\r\n    }\r\n\r\n    return this.fileInputPlaceholderEl;\r\n  }\r\n\r\n  private canGetAsEntry(item: any): item is DataTransferItem {\r\n    return !!item.webkitGetAsEntry;\r\n  }\r\n\r\n  private isDropzoneDisabled(): boolean {\r\n    return (this.globalDraggingInProgress || this.disabled);\r\n  }\r\n\r\n  private addToQueue(item: NgxFileDropEntry): void {\r\n    this.files.push(item);\r\n  }\r\n\r\n  private preventAndStop(event: Event): void {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxFileDropComponent } from './ngx-file-drop.component';\r\nimport { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxFileDropComponent,\r\n    NgxFileDropContentTemplateDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    NgxFileDropComponent,\r\n    NgxFileDropContentTemplateDirective,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [\r\n    NgxFileDropComponent\r\n  ],\r\n})\r\nexport class NgxFileDropModule {}\r\n"]}