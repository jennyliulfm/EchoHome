var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { timer } from 'rxjs';
import { NgxFileDropEntry } from './ngx-file-drop-entry';
import { NgxFileDropContentTemplateDirective } from './ngx-templates.directive';
var NgxFileDropComponent = /** @class */ (function () {
    function NgxFileDropComponent(zone, renderer) {
        var _this = this;
        this.zone = zone;
        this.renderer = renderer;
        this.accept = '*';
        this.directory = false;
        this.multiple = true;
        this.dropZoneLabel = '';
        this.dropZoneClassName = 'ngx-file-drop__drop-zone';
        this.useDragEnter = false;
        this.contentClassName = 'ngx-file-drop__content';
        this.showBrowseBtn = false;
        this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';
        this.browseBtnLabel = 'Browse files';
        this.onFileDrop = new EventEmitter();
        this.onFileOver = new EventEmitter();
        this.onFileLeave = new EventEmitter();
        this.isDraggingOverDropZone = false;
        this.globalDraggingInProgress = false;
        this.files = [];
        this.numOfActiveReadEntries = 0;
        this.helperFormEl = null;
        this.fileInputPlaceholderEl = null;
        this.dropEventTimerSubscription = null;
        this._disabled = false;
        this.openFileSelector = function (event) {
            if (_this.fileSelector && _this.fileSelector.nativeElement) {
                _this.fileSelector.nativeElement.click();
            }
        };
        this.globalDragStartListener = this.renderer.listen('document', 'dragstart', function (evt) {
            _this.globalDraggingInProgress = true;
        });
        this.globalDragEndListener = this.renderer.listen('document', 'dragend', function (evt) {
            _this.globalDraggingInProgress = false;
        });
    }
    Object.defineProperty(NgxFileDropComponent.prototype, "disabled", {
        get: function () { return this._disabled; },
        set: function (value) {
            this._disabled = (value != null && "" + value !== 'false');
        },
        enumerable: true,
        configurable: true
    });
    NgxFileDropComponent.prototype.ngOnDestroy = function () {
        if (this.dropEventTimerSubscription) {
            this.dropEventTimerSubscription.unsubscribe();
            this.dropEventTimerSubscription = null;
        }
        this.globalDragStartListener();
        this.globalDragEndListener();
        this.files = [];
        this.helperFormEl = null;
        this.fileInputPlaceholderEl = null;
    };
    NgxFileDropComponent.prototype.onDragOver = function (event) {
        if (this.useDragEnter) {
            this.preventAndStop(event);
        }
        else if (!this.isDropzoneDisabled() && !this.useDragEnter) {
            if (!this.isDraggingOverDropZone) {
                this.isDraggingOverDropZone = true;
                this.onFileOver.emit(event);
            }
            this.preventAndStop(event);
        }
    };
    NgxFileDropComponent.prototype.onDragEnter = function (event) {
        if (!this.isDropzoneDisabled() && this.useDragEnter) {
            if (!this.isDraggingOverDropZone) {
                this.isDraggingOverDropZone = true;
                this.onFileOver.emit(event);
            }
            this.preventAndStop(event);
        }
    };
    NgxFileDropComponent.prototype.onDragLeave = function (event) {
        if (!this.isDropzoneDisabled()) {
            if (this.isDraggingOverDropZone) {
                this.isDraggingOverDropZone = false;
                this.onFileLeave.emit(event);
            }
            this.preventAndStop(event);
        }
    };
    NgxFileDropComponent.prototype.dropFiles = function (event) {
        if (!this.isDropzoneDisabled()) {
            this.isDraggingOverDropZone = false;
            if (event.dataTransfer) {
                event.dataTransfer.dropEffect = 'copy';
                var items = void 0;
                if (event.dataTransfer.items) {
                    items = event.dataTransfer.items;
                }
                else {
                    items = event.dataTransfer.files;
                }
                this.preventAndStop(event);
                this.checkFiles(items);
            }
        }
    };
    /**
     * Processes the change event of the file input and adds the given files.
     * @param Event event
     */
    NgxFileDropComponent.prototype.uploadFiles = function (event) {
        if (!this.isDropzoneDisabled()) {
            if (event.target) {
                var items = event.target.files || [];
                this.checkFiles(items);
                this.resetFileInput();
            }
        }
    };
    NgxFileDropComponent.prototype.checkFiles = function (items) {
        var _this = this;
        var _loop_1 = function (i) {
            var item = items[i];
            var entry = null;
            if (this_1.canGetAsEntry(item)) {
                entry = item.webkitGetAsEntry();
            }
            if (!entry) {
                if (item) {
                    var fakeFileEntry = {
                        name: item.name,
                        isDirectory: false,
                        isFile: true,
                        file: function (callback) {
                            callback(item);
                        },
                    };
                    var toUpload = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);
                    this_1.addToQueue(toUpload);
                }
            }
            else {
                if (entry.isFile) {
                    var toUpload = new NgxFileDropEntry(entry.name, entry);
                    this_1.addToQueue(toUpload);
                }
                else if (entry.isDirectory) {
                    this_1.traverseFileTree(entry, entry.name);
                }
            }
        };
        var this_1 = this;
        for (var i = 0; i < items.length; i++) {
            _loop_1(i);
        }
        if (this.dropEventTimerSubscription) {
            this.dropEventTimerSubscription.unsubscribe();
        }
        this.dropEventTimerSubscription = timer(200, 200)
            .subscribe(function () {
            if (_this.files.length > 0 && _this.numOfActiveReadEntries === 0) {
                var files = _this.files;
                _this.files = [];
                _this.onFileDrop.emit(files);
            }
        });
    };
    NgxFileDropComponent.prototype.traverseFileTree = function (item, path) {
        var _this = this;
        if (item.isFile) {
            var toUpload = new NgxFileDropEntry(path, item);
            this.files.push(toUpload);
        }
        else {
            path = path + '/';
            var dirReader_1 = item.createReader();
            var entries_1 = [];
            var readEntries_1 = function () {
                _this.numOfActiveReadEntries++;
                dirReader_1.readEntries(function (result) {
                    if (!result.length) {
                        // add empty folders
                        if (entries_1.length === 0) {
                            var toUpload_1 = new NgxFileDropEntry(path, item);
                            _this.zone.run(function () {
                                _this.addToQueue(toUpload_1);
                            });
                        }
                        else {
                            var _loop_2 = function (i) {
                                _this.zone.run(function () {
                                    _this.traverseFileTree(entries_1[i], path + entries_1[i].name);
                                });
                            };
                            for (var i = 0; i < entries_1.length; i++) {
                                _loop_2(i);
                            }
                        }
                    }
                    else {
                        // continue with the reading
                        entries_1 = entries_1.concat(result);
                        readEntries_1();
                    }
                    _this.numOfActiveReadEntries--;
                });
            };
            readEntries_1();
        }
    };
    /**
     * Clears any added files from the file input element so the same file can subsequently be added multiple times.
     */
    NgxFileDropComponent.prototype.resetFileInput = function () {
        if (this.fileSelector && this.fileSelector.nativeElement) {
            var fileInputEl = this.fileSelector.nativeElement;
            var fileInputContainerEl = fileInputEl.parentElement;
            var helperFormEl = this.getHelperFormElement();
            var fileInputPlaceholderEl = this.getFileInputPlaceholderElement();
            // Just a quick check so we do not mess up the DOM (will never happen though).
            if (fileInputContainerEl !== helperFormEl) {
                // Insert the form input placeholder in the DOM before the form input element.
                this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);
                // Add the form input as child of the temporary form element, removing the form input from the DOM.
                this.renderer.appendChild(helperFormEl, fileInputEl);
                // Reset the form, thus clearing the input element of any files.
                helperFormEl.reset();
                // Add the file input back to the DOM in place of the file input placeholder element.
                this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);
                // Remove the input placeholder from the DOM
                this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);
            }
        }
    };
    /**
     * Get a cached HTML form element as a helper element to clear the file input element.
     */
    NgxFileDropComponent.prototype.getHelperFormElement = function () {
        if (!this.helperFormEl) {
            this.helperFormEl = this.renderer.createElement('form');
        }
        return this.helperFormEl;
    };
    /**
     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
     */
    NgxFileDropComponent.prototype.getFileInputPlaceholderElement = function () {
        if (!this.fileInputPlaceholderEl) {
            this.fileInputPlaceholderEl = this.renderer.createElement('div');
        }
        return this.fileInputPlaceholderEl;
    };
    NgxFileDropComponent.prototype.canGetAsEntry = function (item) {
        return !!item.webkitGetAsEntry;
    };
    NgxFileDropComponent.prototype.isDropzoneDisabled = function () {
        return (this.globalDraggingInProgress || this.disabled);
    };
    NgxFileDropComponent.prototype.addToQueue = function (item) {
        this.files.push(item);
    };
    NgxFileDropComponent.prototype.preventAndStop = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    NgxFileDropComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxFileDropComponent.prototype, "accept", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxFileDropComponent.prototype, "directory", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxFileDropComponent.prototype, "multiple", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxFileDropComponent.prototype, "dropZoneLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxFileDropComponent.prototype, "dropZoneClassName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxFileDropComponent.prototype, "useDragEnter", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxFileDropComponent.prototype, "contentClassName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], NgxFileDropComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], NgxFileDropComponent.prototype, "showBrowseBtn", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxFileDropComponent.prototype, "browseBtnClassName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxFileDropComponent.prototype, "browseBtnLabel", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxFileDropComponent.prototype, "onFileDrop", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxFileDropComponent.prototype, "onFileOver", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxFileDropComponent.prototype, "onFileLeave", void 0);
    __decorate([
        ContentChild(NgxFileDropContentTemplateDirective, { read: TemplateRef }),
        __metadata("design:type", TemplateRef)
    ], NgxFileDropComponent.prototype, "contentTemplate", void 0);
    __decorate([
        ViewChild('fileSelector', { static: true }),
        __metadata("design:type", ElementRef)
    ], NgxFileDropComponent.prototype, "fileSelector", void 0);
    NgxFileDropComponent = __decorate([
        Component({
            selector: 'ngx-file-drop',
            template: "<div [className]=\"dropZoneClassName\"\r\n     [class.ngx-file-drop__drop-zone--over]=\"isDraggingOverDropZone\"\r\n     (drop)=\"dropFiles($event)\"\r\n     (dragover)=\"onDragOver($event)\"\r\n     (dragenter)=\"onDragEnter($event)\"\r\n     (dragleave)=\"onDragLeave($event)\">\r\n  <div [className]=\"contentClassName\">\r\n    <input \r\n      type=\"file\" \r\n      #fileSelector \r\n      [accept]=\"accept\" \r\n      [attr.directory]=\"directory || undefined\" \r\n      [attr.webkitdirectory]=\"directory || undefined\"\r\n      [attr.mozdirectory]=\"directory || undefined\"\r\n      [attr.msdirectory]=\"directory || undefined\"\r\n      [attr.odirectory]=\"directory || undefined\"\r\n      [multiple]=\"multiple\"\r\n      (change)=\"uploadFiles($event)\" \r\n      class=\"ngx-file-drop__file-input\" \r\n    />\r\n\r\n    <ng-template #defaultContentTemplate>\r\n      <div *ngIf=\"dropZoneLabel\" class=\"ngx-file-drop__drop-zone-label\">{{dropZoneLabel}}</div>\r\n      <div *ngIf=\"showBrowseBtn\">\r\n        <input type=\"button\" [className]=\"browseBtnClassName\" value=\"{{browseBtnLabel}}\" (click)=\"openFileSelector($event)\" />\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template\r\n      [ngTemplateOutlet]=\"contentTemplate || defaultContentTemplate\"\r\n      [ngTemplateOutletContext]=\"{ openFileSelector: openFileSelector }\">\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n",
            styles: [".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:rgba(147,147,147,.5)}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}"]
        }),
        __metadata("design:paramtypes", [NgZone,
            Renderer2])
    ], NgxFileDropComponent);
    return NgxFileDropComponent;
}());
export { NgxFileDropComponent };
//# sourceMappingURL=data:application/json;base64,