{"version":3,"sources":["webpack:///src/app/components/admin/category/category.component.ts","webpack:///src/app/components/admin/category/category.component.html","webpack:///src/app/components/admin/product/product.component.ts","webpack:///src/app/components/admin/product/product.component.html","webpack:///src/app/modules/admin-routing/admin-routing.module.ts","webpack:///src/app/modules/admin/admin.module.ts","webpack:///src/app/services/category.service.ts"],"names":["CategoryComponent","formBuilder","categoryService","toastrService","categoryModalGroup","group","categoryName","required","description","getAllCategories","categoryModal","show","reset","hide","args","categoryFormGroupValue","categoryId","createCategory","subscribe","res","success","closeCategoryModal","err","console","log","getAllCateogries","categories","value","openCategoryModal","selector","templateUrl","styleUrls","ProductComponent","productService","toasterService","productGroupModel","name","price","getAllProducts","products","error","productModal","productFormGroupValue","Number","category","getSelectedCategory","productId","createNewProduct","openProductModal","closeProductModal","createProduct","adminRoutes","path","component","AdminRoutingModule","forChild","declarations","imports","exports","AdminModule","forRoot","CategoryService","http","BASEURL","post","get","providedIn"],"mappings":"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","file":"app-modules-admin-admin-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { Category } from 'src/app/models/model';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { CategoryService } from '../../../services/category.service'\nimport { ToastrService } from 'ngx-toastr';\n\n/**\n * Modal form data form\n */\ninterface CategoryForm {\n  categoryName: string,\n  description: string,\n}\n\n@Component({\n  selector: 'app-category',\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.css']\n})\nexport class CategoryComponent implements OnInit {\n\n  @ViewChild('categoryModal', { static: false }) categoryModal: ModalDirective;\n  \n  public categories?: Array<Category>;\n\n  /**\n   * Modal form group\n   */\n  public readonly categoryModalGroup = this.formBuilder.group({\n      categoryName: ['', Validators.required],\n      description: ['', Validators.required],\n    });\n\n  constructor( \n    private formBuilder: FormBuilder,\n    private categoryService: CategoryService,\n    private toastrService: ToastrService) {\n\n     }\n\n  ngOnInit(): void {\n    this.getAllCategories();\n  }\n\n\n  /**\n   * Get form group value\n   */\n  get categoryFormGroupValue(): CategoryForm {\n    return this.categoryModalGroup.value;\n  }\n\n  /**\n   * Open category modal\n   */\n  openCategoryModal(){\n    this.categoryModal.show();\n  }\n\n  /**\n   * Close category modal\n   */\n  closeCategoryModal(){\n    this.categoryModalGroup.reset();\n    this.categoryModal.hide();\n  }\n\n  /**\n   * Create new category\n   */\n  createCategory() {\n\n    const args: Category ={\n      categoryName: this.categoryFormGroupValue.categoryName,\n      description: this.categoryFormGroupValue.description,\n      categoryId: 0\n    };\n\n    this.categoryService.createCategory(args).subscribe(\n      res => {\n        this.toastrService.success(`The product ${this.categoryFormGroupValue.categoryName} has been created succesfully`);\n        this.closeCategoryModal();\n        this.getAllCategories();\n       \n      },\n      \n      err => {\n        console.log(\"ERROR: CreateCategory\")\n      }\n\n    );\n\n  }\n\n  /**\n   * Get all cateogries\n   */\n  getAllCategories() {\n    this.categoryService.getAllCateogries().subscribe(\n      res => {\n        this.categories = res;\n      },\n\n      err => {\n        console.log(\"ERROR: getAllCategories\")\n      }\n    )\n\n  }\n\n}\n","<div class=\"row wrapper border-bottom white-bg page-heading\">\n    <div class=\"col-lg-10\">\n        <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\">\n                <a [routerLink]=\"['/home']\">Home</a>\n            </li>\n            <li class=\"breadcrumb-item\">\n                <a>Category</a>\n            </li>\n        </ol>\n    </div>\n</div>\n\n<div class=\"wrapper wrapper-content\">\n    <div class=\"row\">\n        <div class=\"col-lg-8 col-md-12\">\n            <div class=\"ibox\">\n                <div class=\"ibox-title\">\n                    <h5>Categories</h5>\n                    <div class=\"ibox-tools\">\n                        <button class=\"btn btn-primary btn-sm\" (click)=\"openCategoryModal()\">Add Category</button>\n                    </div>\n                </div>\n                <div class=\"ibox-content\">\n                    <div class=\"table-responsive\">\n                        <h2>Category List</h2>\n                        <table class=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>Category Id</th>\n                                    <th>Name</th>\n                                    <th>Decription</th>\n\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr class=\"gradeX\" *ngFor=\"let category of categories; let i = index;\">\n                                    <td>{{ category.categoryId}}</td>\n                                    <td>{{ category.categoryName}}</td>\n                                    <td>{{ category.description}}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"modal fade\" bsModal #categoryModal=\"bs-modal\" tabindex=\"-1\" role=\"dialog\"\n        (onHidden)=\"closeCategoryModal()\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-body\">\n                    <form role=\"form\" [formGroup]=\"categoryModalGroup\" (ngSubmit)=\"createCategory()\">\n                        <h3>Create New Category</h3>\n                        <div class=\"form-group\"><input type=\"text\" placeholder=\"Enter Category Name\" class=\"form-control\"\n                                formControlName=\"categoryName\">\n                        </div>\n\n                        <div class=\"form-group\"><input type=\"text\" placeholder=\"Enter Category Description\"\n                                class=\"form-control\" formControlName=\"description\">\n                        </div>\n\n                        <button class=\"btn btn-sm btn-primary m-t-n-xs\" type=\"submit\">\n                            <strong>Add New Category</strong>\n                        </button>\n                    </form>\n                </div>\n            </div>\n        </div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { FormBuilder, Validators, FormGroup, Form } from '@angular/forms';\nimport { ProductService } from '../../../services/product.service'\nimport { CategoryService } from '../../../services/category.service'\nimport { Product, Category } from 'src/app/models/model';\nimport { ToastrService } from 'ngx-toastr';\n\n\ninterface ProductForm {\n  name: string;\n  description: string;\n  price: number;\n  cateogryId: number;\n}\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\nexport class ProductComponent implements OnInit {\n\n  @ViewChild('productModal', { static: false }) productModal: ModalDirective;\n\n  public products?: Array<Product>;\n  public categories?: Array<Category>;\n\n  constructor(\n    private productService: ProductService,\n    private formBuilder: FormBuilder,\n    private toasterService: ToastrService,\n    private categoryService: CategoryService) {\n\n  }\n\n  ngOnInit(): void {\n    this.getAllProducts();\n    this.getAllCategories();\n  }\n  /**\n   * \n   */\n\n\n  /**\n   * Get all products\n   */\n  getAllProducts() {\n    this.productService.getAllProducts().subscribe(\n      res => {\n        this.products = res;\n      },\n      err => {\n        console.error(\"Error: getAllProducts\", err);\n      }\n    )\n  }\n\n  public readonly productGroupModel: FormGroup = this.formBuilder.group({\n    name: ['', Validators.required],\n    description: ['', Validators.required],\n    price: ['', Validators.required],\n    categoryId: ['', Validators.required],\n  });\n\n  get productFormGroupValue(): ProductForm {\n    return this.productGroupModel.value;\n  }\n\n  /**\n   * \n   */\n  closeProductModal() {\n    this.productModal.hide();\n  }\n\n  /**\n  * Open product moda.\n  */\n  openProductModal() {\n    this.productModal.show();\n  }\n  /**\n   * Create new product\n   */\n  createProduct() {\n    const args: Product = {\n      name: this.productFormGroupValue.name,\n      price: Number(this.productFormGroupValue.price),\n      description: this.productFormGroupValue.description,\n      category: this.getSelectedCategory(),\n      productId: 0\n    };\n\n\n    this.productService.createNewProduct(args).subscribe(\n      res => {\n        if (res) {\n          this.toasterService.success(`Product has been creates successfully`);\n\n          this.productModal.hide();\n          this.productGroupModel.reset();\n\n          this.getAllProducts();\n        }\n      },\n      err => {\n        console.error(\"ERROR: createProduct\", err);\n      }\n    )\n\n  }\n\n  /**\n   * Get all cateogries\n   */\n  getAllCategories() {\n    this.categoryService.getAllCateogries().subscribe(\n      res => {\n        this.categories = res;\n      },\n\n      err => {\n        console.log(\"ERROR: getAllCategories\")\n      }\n    )\n  }\n\n  /**\n   * Get Category By Id\n   */\n  getSelectedCategory() {\n    console.log(this.productGroupModel.value.categoryId);\n    for (let category of this.categories) {\n      if (category.categoryId == Number(this.productGroupModel.value.categoryId)) {\n        return category;\n      }\n    }\n\n  }\n\n}\n","<div class=\"row wrapper border-bottom white-bg page-heading\">\n    <div class=\"col-lg-10\">\n        <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\">\n                <a [routerLink]=\"['/home']\">Home</a>\n            </li>\n            <li class=\"breadcrumb-item\">\n                <a>Product</a>\n            </li>\n        </ol>\n    </div>\n</div>\n\n<div class=\"wrapper wrapper-content\">\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12\">\n            <div class=\"ibox\">\n                <div class=\"ibox-title\">\n                    <h5>Products</h5>\n                    <div class=\"ibox-tools\">\n                        <button class=\"btn btn-primary btn-sm\" (click)=\"openProductModal()\">Add Product</button>\n                    </div>\n                </div>\n                <div class=\"ibox-content\">\n                    <div class=\"table-responsive\">\n                        <h2>Product List</h2>\n                        <table class=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>Product Id</th>\n                                    <th>Name</th>\n                                    <th>Decription</th>\n                                    <th>Price</th>\n                                    <th>Category</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr class=\"gradeX\" *ngFor=\"let product of products; let i = index;\">\n                                    <td>{{ product.productId }}</td>\n                                    <td>{{ product.name }}</td>\n                                    <td>{{ product.price | currency }}</td>\n                                    <td>{{ product.description }}</td>\n                                    <td>{{ product.category.categoryName }}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"modal fade\" bsModal #productModal=\"bs-modal\" tabindex=\"-1\" role=\"dialog\"\n        (onHidden)=\"closeProductModal()\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-body\">\n                    <form role=\"form\" [formGroup]=\"productGroupModel\" (ngSubmit)=\"createProduct()\">\n                        <h3>Create New Product</h3>\n                        <div class=\"form-group\"><input type=\"text\" placeholder=\"Enter Product Name\" class=\"form-control\"\n                                formControlName=\"name\">\n                        </div>\n\n                        <div class=\"form-group\"><input type=\"text\" placeholder=\"Enter Product Description\"\n                                class=\"form-control\" formControlName=\"description\">\n                        </div>\n\n                        <div class=\"form-group\"><input type=\"text\" placeholder=\"Enter Price\" class=\"form-control\"\n                                formControlName=\"price\">\n                        </div>\n\n                        <label class=\"col-sm-4 col-form-label\">Select Category</label>\n                        <select class=\"form-control\" formControlName=\"categoryId\">\n                            <option *ngFor=\"let category of categories\" [value]=\"category.categoryId\">\n                                {{category.categoryName}}</option>\n                        </select>\n\n                        <button class=\"btn btn-sm btn-primary m-t-n-xs\" type=\"submit\">\n                            <strong>Add New Product</strong>\n                        </button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProductComponent } from '../../../app/components/admin/product/product.component';\nimport { CategoryComponent } from '../../../app/components/admin/category/category.component';\n\nconst adminRoutes: Routes = [\n  { path: 'product', component: ProductComponent },\n  { path: 'category', component: CategoryComponent },\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdminRoutingModule } from '../admin-routing/admin-routing.module'\nimport { ProductComponent } from '../../components/admin/product/product.component';\nimport { CategoryComponent } from '../../components/admin/category/category.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    ProductComponent,\n    CategoryComponent\n  ],\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    HttpClientModule,\n    FontAwesomeModule,\n    ModalModule.forRoot(),\n    AdminRoutingModule\n  ],\n  \n})\nexport class AdminModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Category, Product } from '../models/model'\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n\n  private readonly BASEURL: string = \"https://localhost:5001/Category\"\n  constructor(\n    private http: HttpClient) {\n\n  }\n\n  /**\n * Crate Category\n */\n  createCategory(category: Category): Observable<any> {\n    return this.http.post(this.BASEURL + '/CreateCategory', category);\n  }\n\n  /**\n   * Get all Category\n   */\n  getAllCateogries(): Observable<Array<Category>> {\n    return this.http.get<Array<Category>>(this.BASEURL + '/GetAllCategroies');\n  }\n}\n"]}